swagger: '2.0'
info:
  description: |
    RS shop API challenge API documentation
  version: 1.0.0
  title: Mini Shop API
# host: localhost:5000
# basePath: /
tags:
- name: product
  description: Operations about products
# schemes:
# - http
paths:
  /product/{product_name}:
    get:
      tags:
      - product
      summary: Get a product by name
      operationId: getProduct
      produces:
      - application/json
      - application/xml
      parameters:
      - in: path
        name: product_name
        type: string
        description: Products name which needs to be returned
        required: true
      responses:
        200:
          description: Returned product
        400:
          description: Invalid input
        500:
          description: Server error
  /product:
    post:
      tags:
      - product
      summary: Creates a product
      description: Product info in JSON format
      operationId: createProduct
      consumes:
      - application/json
      - multipart/form-data
      produces:
      - application/json
      - application/xml
      parameters:
      - name: name
        in: formData
        description: Product name
        required: true
        type: string
      - name: price
        in: formData
        description: Product price
        required: true
        type: number
      - name: category
        in: formData
        description: Product type name
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: object
            items:
              $ref: '#/definitions/ApiResponse'
        400:
          description: Invalid input
        500:
          description: Internal server error
    delete:
      tags:
      - product
      summary: Deletes a product
      description: Product name in a JSON
      operationId: deleteProduct
      consumes:
      - application/json
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: name
        in: formData
        description: Product name
        required: true
        type: string
      responses:
        200:
          description: successful operation
        400:
          description: Invalid input
        500:
          description: Internal server error
  /products:
    get:
      tags:
      - product
      summary: Gets all available products
      description: Returns all products in JSON format
      operationId: getAllProducts
      produces:
      - application/json
      responses:
        200:
          description: successful operation
        500:
          description: Internal server error
    
  /cart/{cart_id}:
    get:
      tags:
      - cart
      summary: Returns a cart by id
      description: Provide an existing cart id
      operationId: getCartById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cart_id
        in: path
        description: Cart id to return by
        required: true
        type: number
      responses:
        200:
          description: successful operation
          schema:
            type: object
            items:
              $ref: '#/definitions/Cart'
        400:
          description: Invalid card id
        500:
          description: Internal server error
          
  /cart/{cart_id}/total:
    get:
      tags:
      - cart
      summary: Gets cart total
      description: Returns cart total in JSON object
      operationId: getCartTotalById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cart_id
        in: path
        description: cart id for which to calculate total price
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
        500:
          description: Internal server error
          
  /cart:
    post:
      tags:
      - cart
      summary: Creates a new cart
      operationId: createCart
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      produces:
      - application/json
      - application/xml
      parameters:
      - name: product_id
        in: formData
        description: Product's, which needs to be added, id
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
        400:
          description: Invalid input
        500:
          description: Internal server error
    put:
      tags:
      - cart
      summary: Adds a product to an existing cart
      operationId: addToCart
      consumes:
      - application/json
      - multipart/form-data
      produces:
      - application/json
      - application/xml
      parameters:
      - name: product_id
        in: formData
        required: true
        type: number
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
        400:
          description: Invalid product id
        500:
          description: Internal server error
  /order/{order_id}:
    get:
      tags:
      - order
      summary: Review order status and other info
      operationId: getOrder
      produces:
      - application/json
      parameters:
      - name: order_id
        in: path
        description: ID of an order which status we want to review
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid input
        500:
          description: Internal server error
  /order:
    post:
      tags:
      - order
      summary: Creates an order from an existing cart
      description: Returns order confirmation message
      operationId: placeOrder
      consumes:
      - application/json
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: cart_id
        in: formData
        description: Cart id, from which we want to place an order
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
        400:
          description: Invalid input
        500:
          description: Internal server error
definitions:
  Cart:
    type: object
    properties:
      id:
        type: integer
        format: int64
      created_at:
        type: string
        format: date-time
      total_price:
        type: string
        format: float
      products:
        type: array
        format: object
        items:
          $ref: '#/definitions/Product'
    xml:
      name: Cart
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      created_at:
        type: string
        format: date-time
      finished_at:
        type: string
        format: date-time
      is_finished:
        type: boolean
      status:
        type: string
      total_price:
        type: string
        format: float
      products:
        type: array
        format: object
        items:
          $ref: '#/definitions/Product'
    xml:
      name: Order
  Product:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      price:
        type: string
        format: float
      category:
        type: object
    xml:
      name: Product
  ApiResponse:
    type: object
    properties:
      status:
        type: string
      message:
        type: string
externalDocs:
  description: Find more detailed information in the GitLab repository by checking out the readme.
  url: https://gitlab.com/LuckyRads/rs-challenge-2-shop-api

# host: localhost:5000
# schemes:
#  - http
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /Lucky44/RS-SHOP_API/1.0.0
schemes:
 - https
 - http